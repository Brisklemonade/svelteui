{"ast":null,"code":"function _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it[\"return\"] != null) it[\"return\"](); } finally { if (didErr) throw err; } } }; }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nimport { removeFromLast } from './utils'; // @ts-ignore\n\nexport function findRouteByPath(path, routes) {\n  // eslint-disable-next-line\n  var _iterator = _createForOfIteratorHelper(routes),\n      _step;\n\n  try {\n    for (_iterator.s(); !(_step = _iterator.n()).done;) {\n      var route = _step.value;\n\n      if (route.path && removeFromLast(route.path, '.') === path) {\n        return route;\n      }\n\n      var childPath = route.routes && findRouteByPath(path, route.routes);\n      if (childPath) return childPath;\n    }\n  } catch (err) {\n    _iterator.e(err);\n  } finally {\n    _iterator.f();\n  }\n}","map":{"version":3,"sources":["/Users/kamell/Desktop/test-docs/src/lib/docs/findRouteByPath.js"],"names":["removeFromLast","findRouteByPath","path","routes","route","childPath"],"mappings":";;;;;;AAAA,SAASA,cAAT,QAA+B,SAA/B,C,CACA;;AACA,OAAO,SAASC,eAAT,CAAyBC,IAAzB,EAA+BC,MAA/B,EAAuC;AAC5C;AAD4C,6CAExBA,MAFwB;AAAA;;AAAA;AAE5C,wDAA4B;AAAA,UAAjBC,KAAiB;;AAC1B,UAAIA,KAAK,CAACF,IAAN,IAAcF,cAAc,CAACI,KAAK,CAACF,IAAP,EAAa,GAAb,CAAd,KAAoCA,IAAtD,EAA4D;AAC1D,eAAOE,KAAP;AACD;;AAED,UAAMC,SAAS,GAAGD,KAAK,CAACD,MAAN,IAAgBF,eAAe,CAACC,IAAD,EAAOE,KAAK,CAACD,MAAb,CAAjD;AACA,UAAIE,SAAJ,EAAe,OAAOA,SAAP;AAChB;AAT2C;AAAA;AAAA;AAAA;AAAA;AAU7C","sourcesContent":["import { removeFromLast } from './utils';\n// @ts-ignore\nexport function findRouteByPath(path, routes) {\n  // eslint-disable-next-line\n  for (const route of routes) {\n    if (route.path && removeFromLast(route.path, '.') === path) {\n      return route;\n    }\n\n    const childPath = route.routes && findRouteByPath(path, route.routes);\n    if (childPath) return childPath;\n  }\n}"]},"metadata":{},"sourceType":"module"}
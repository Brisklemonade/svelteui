{"ast":null,"code":"import React from 'react';\n/**\n * Sets up Table of Contents highlighting. It requires that\n */\n\nexport function useTocHighlight(linkClassName, linkActiveClassName, topOffset, getHeaderAnchors, getHeaderDataFromAnchor, getAnchorHeaderIdentifier) {\n  const [lastActiveLink, setLastActiveLink] = React.useState(undefined);\n  const [headings, setHeadings] = React.useState([]);\n  React.useEffect(() => {\n    setHeadings(getHeaderAnchors().map(getHeaderDataFromAnchor));\n  }, [setHeadings]);\n  React.useEffect(() => {\n    let headersAnchors = [];\n    let links = [];\n\n    function setActiveLink() {\n      function getActiveHeaderAnchor() {\n        let index = 0;\n        let activeHeaderAnchor = null;\n        headersAnchors = getHeaderAnchors();\n\n        while (index < headersAnchors.length && !activeHeaderAnchor) {\n          const headerAnchor = headersAnchors[index];\n          const {\n            top\n          } = headerAnchor.getBoundingClientRect();\n\n          if (top >= 0 && top <= topOffset) {\n            activeHeaderAnchor = headerAnchor;\n          }\n\n          index += 1;\n        }\n\n        return activeHeaderAnchor;\n      }\n\n      const activeHeaderAnchor = getActiveHeaderAnchor();\n\n      if (activeHeaderAnchor) {\n        let index = 0;\n        let itemHighlighted = false;\n        links = document.getElementsByClassName(linkClassName);\n\n        while (index < links.length && !itemHighlighted) {\n          const link = links[index];\n          const {\n            href\n          } = link;\n          const anchorValue = decodeURIComponent(href.substring(href.indexOf('#') + 1));\n\n          if (getAnchorHeaderIdentifier(activeHeaderAnchor) === anchorValue) {\n            if (lastActiveLink) {\n              lastActiveLink.classList.remove(linkActiveClassName);\n            }\n\n            link.classList.add(linkActiveClassName);\n            setLastActiveLink(link);\n            itemHighlighted = true;\n          }\n\n          index += 1;\n        }\n      }\n    }\n\n    document.addEventListener('scroll', setActiveLink);\n    document.addEventListener('resize', setActiveLink);\n    setActiveLink();\n    return () => {\n      document.removeEventListener('scroll', setActiveLink);\n      document.removeEventListener('resize', setActiveLink);\n    };\n  });\n  return headings;\n}","map":{"version":3,"sources":["/Users/kamell/Desktop/test-docs/src/components/useTocHighlight.js"],"names":["React","useTocHighlight","linkClassName","linkActiveClassName","topOffset","getHeaderAnchors","getHeaderDataFromAnchor","getAnchorHeaderIdentifier","lastActiveLink","setLastActiveLink","useState","undefined","headings","setHeadings","useEffect","map","headersAnchors","links","setActiveLink","getActiveHeaderAnchor","index","activeHeaderAnchor","length","headerAnchor","top","getBoundingClientRect","itemHighlighted","document","getElementsByClassName","link","href","anchorValue","decodeURIComponent","substring","indexOf","classList","remove","add","addEventListener","removeEventListener"],"mappings":"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","sourcesContent":["import React from 'react'\n\n/**\n * Sets up Table of Contents highlighting. It requires that\n */\nexport function useTocHighlight(\n  linkClassName,\n  linkActiveClassName,\n  topOffset,\n  getHeaderAnchors,\n  getHeaderDataFromAnchor,\n  getAnchorHeaderIdentifier\n) {\n  const [lastActiveLink, setLastActiveLink] = React.useState(undefined)\n  const [headings, setHeadings] = React.useState([])\n\n  React.useEffect(() => {\n    setHeadings(getHeaderAnchors().map(getHeaderDataFromAnchor))\n  }, [setHeadings])\n\n  React.useEffect(() => {\n    let headersAnchors = []\n    let links = []\n\n    function setActiveLink() {\n      function getActiveHeaderAnchor() {\n        let index = 0\n        let activeHeaderAnchor = null\n        headersAnchors = getHeaderAnchors()\n\n        while (index < headersAnchors.length && !activeHeaderAnchor) {\n          const headerAnchor = headersAnchors[index]\n          const { top } = headerAnchor.getBoundingClientRect()\n\n          if (top >= 0 && top <= topOffset) {\n            activeHeaderAnchor = headerAnchor\n          }\n\n          index += 1\n        }\n\n        return activeHeaderAnchor\n      }\n\n      const activeHeaderAnchor = getActiveHeaderAnchor()\n\n      if (activeHeaderAnchor) {\n        let index = 0\n        let itemHighlighted = false\n        links = document.getElementsByClassName(linkClassName)\n\n        while (index < links.length && !itemHighlighted) {\n          const link = links[index]\n          const { href } = link\n          const anchorValue = decodeURIComponent(\n            href.substring(href.indexOf('#') + 1)\n          )\n\n          if (getAnchorHeaderIdentifier(activeHeaderAnchor) === anchorValue) {\n            if (lastActiveLink) {\n              lastActiveLink.classList.remove(linkActiveClassName)\n            }\n\n            link.classList.add(linkActiveClassName)\n            setLastActiveLink(link)\n            itemHighlighted = true\n          }\n\n          index += 1\n        }\n      }\n    }\n\n    document.addEventListener('scroll', setActiveLink)\n    document.addEventListener('resize', setActiveLink)\n    setActiveLink()\n    return () => {\n      document.removeEventListener('scroll', setActiveLink)\n      document.removeEventListener('resize', setActiveLink)\n    }\n  })\n  return headings\n}\n"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport * as React from 'react';\nimport { forwardRefWithAs } from './forwardRefWithAs';\nimport cx from 'classnames';\nconst mapIntentToColor = {\n  primary: 'blue',\n  success: 'green',\n  danger: 'red',\n  warning: 'yellow'\n};\nexport const TWButton = forwardRefWithAs((_ref, ref) => {\n  var _mapIntentToColor$int;\n\n  let {\n    as: is = 'button',\n    children,\n    color,\n    intent = 'none',\n    size = 'md',\n    className,\n    icon,\n    minimal,\n    onClick,\n    iconRight\n  } = _ref,\n      props = _objectWithoutProperties(_ref, [\"as\", \"children\", \"color\", \"intent\", \"size\", \"className\", \"icon\", \"minimal\", \"onClick\", \"iconRight\"]);\n\n  const tailwindColor = (_mapIntentToColor$int = mapIntentToColor[intent]) !== null && _mapIntentToColor$int !== void 0 ? _mapIntentToColor$int : color;\n  const iconIsOnlyChild = !!(icon && !iconRight && !children || iconRight && !icon && !children);\n  let sizeClasses;\n  let iconClasses;\n\n  if (size === 'xs') {\n    sizeClasses = 'text-xs rounded-md leading-4';\n    sizeClasses += iconIsOnlyChild ? ' p-1.5' : ' py-1.5 px-2.5';\n    iconClasses = 'h-3 w-3';\n  }\n\n  if (size === 'sm') {\n    sizeClasses = 'text-sm rounded-md leading-4';\n    sizeClasses += iconIsOnlyChild ? ' p-2' : ' py-2 px-3';\n    iconClasses = 'h-3 w-3';\n  }\n\n  if (size === 'md') {\n    sizeClasses = 'text-sm rounded-md leading-5';\n    sizeClasses += iconIsOnlyChild ? ' p-2' : ' py-2 px-4';\n    iconClasses = 'h-5 w-5';\n  }\n\n  if (size === 'lg') {\n    sizeClasses = 'text-base rounded-md leading-6';\n    sizeClasses += iconIsOnlyChild ? ' p-2' : ' py-2 px-4';\n    iconClasses = 'h-6 w-6';\n  }\n\n  if (size === 'xl') {\n    sizeClasses = 'text-base rounded-md leading-6';\n    sizeClasses += iconIsOnlyChild ? ' p-3' : ' py-3 px-6';\n    iconClasses = 'h-6 w-6';\n  }\n\n  const leftIcon = icon ? /*#__PURE__*/React.cloneElement(icon, _objectSpread(_objectSpread({}, icon.props), {}, {\n    height: '1em',\n    width: '1em',\n    className: cx('block', {\n      'text-white': !!tailwindColor && !minimal,\n      [`text-${tailwindColor}-700`]: !!tailwindColor && !!minimal,\n      'text-gray-600': !tailwindColor,\n      '-ml-1 mr-2': !iconIsOnlyChild\n    }, iconClasses, icon === null || icon === void 0 ? void 0 : icon.props.className)\n  })) : null;\n  const rightIcon = iconRight ? /*#__PURE__*/React.cloneElement(iconRight, _objectSpread(_objectSpread({}, iconRight.props), {}, {\n    height: '1em',\n    width: '1em',\n    className: cx('block ', {\n      'text-white': !!tailwindColor && !minimal,\n      [`text-${tailwindColor}-700`]: !!tailwindColor && !!minimal,\n      'text-gray-600': !tailwindColor,\n      '-mr-1 ml-2': !iconIsOnlyChild\n    }, iconClasses, iconRight === null || iconRight === void 0 ? void 0 : iconRight.props.className)\n  })) : null;\n\n  const propsToPass = _objectSpread(_objectSpread({}, props), {}, {\n    className: cx('font-medium inline-flex items-center justify-center focus:outline-none transition duration-150 ease-in-out', {\n      [`shadow-xs  border border-transparent text-white bg-${tailwindColor}-600 hover:bg-${tailwindColor}-500 focus:border-${tailwindColor}-700 focus:shadow-outline-${tailwindColor} active:border-${tailwindColor}-700`]: !!tailwindColor && !minimal,\n      [`shadow-xs border border-gray-300 text-gray-700 bg-white hover:text-gray-500  focus:shadow-outline-blue focus:border-blue-300 active:text-gray-800 active:bg-gray-50`]: !tailwindColor && !minimal,\n      [`hover:bg-${tailwindColor}-100 active:bg-${tailwindColor}-200 text-${tailwindColor}-700 focus:shadow-outline-${tailwindColor} border-transparent`]: minimal && tailwindColor,\n      [`hover:bg-gray-200 active:bg-gray-300 text-gray-900 focus:shadow-outline-blue border-transparent`]: minimal && !tailwindColor\n    }, sizeClasses, className),\n    children: __jsx(React.Fragment, null, leftIcon, children, rightIcon)\n  });\n\n  return /*#__PURE__*/React.createElement(is, _objectSpread(_objectSpread({}, propsToPass), {}, {\n    ref,\n    onClick,\n    className: propsToPass.className\n  }));\n});\nTWButton.displayName = 'TWButton';","map":{"version":3,"sources":["/Users/kamell/Desktop/test-docs/src/components/TWButton.js"],"names":["React","forwardRefWithAs","cx","mapIntentToColor","primary","success","danger","warning","TWButton","ref","as","is","children","color","intent","size","className","icon","minimal","onClick","iconRight","props","tailwindColor","iconIsOnlyChild","sizeClasses","iconClasses","leftIcon","cloneElement","height","width","rightIcon","propsToPass","createElement","displayName"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport { forwardRefWithAs } from './forwardRefWithAs';\nimport cx from 'classnames';\nconst mapIntentToColor = {\n  primary: 'blue',\n  success: 'green',\n  danger: 'red',\n  warning: 'yellow'\n};\nexport const TWButton = forwardRefWithAs(({\n  as: is = 'button',\n  children,\n  color,\n  intent = 'none',\n  size = 'md',\n  className,\n  icon,\n  minimal,\n  onClick,\n  iconRight,\n  ...props\n}, ref) => {\n  const tailwindColor = mapIntentToColor[intent] ?? color;\n  const iconIsOnlyChild = !!(icon && !iconRight && !children || iconRight && !icon && !children);\n  let sizeClasses;\n  let iconClasses;\n\n  if (size === 'xs') {\n    sizeClasses = 'text-xs rounded-md leading-4';\n    sizeClasses += iconIsOnlyChild ? ' p-1.5' : ' py-1.5 px-2.5';\n    iconClasses = 'h-3 w-3';\n  }\n\n  if (size === 'sm') {\n    sizeClasses = 'text-sm rounded-md leading-4';\n    sizeClasses += iconIsOnlyChild ? ' p-2' : ' py-2 px-3';\n    iconClasses = 'h-3 w-3';\n  }\n\n  if (size === 'md') {\n    sizeClasses = 'text-sm rounded-md leading-5';\n    sizeClasses += iconIsOnlyChild ? ' p-2' : ' py-2 px-4';\n    iconClasses = 'h-5 w-5';\n  }\n\n  if (size === 'lg') {\n    sizeClasses = 'text-base rounded-md leading-6';\n    sizeClasses += iconIsOnlyChild ? ' p-2' : ' py-2 px-4';\n    iconClasses = 'h-6 w-6';\n  }\n\n  if (size === 'xl') {\n    sizeClasses = 'text-base rounded-md leading-6';\n    sizeClasses += iconIsOnlyChild ? ' p-3' : ' py-3 px-6';\n    iconClasses = 'h-6 w-6';\n  }\n\n  const leftIcon = icon ? React.cloneElement(icon, { ...icon.props,\n    height: '1em',\n    width: '1em',\n    className: cx('block', {\n      'text-white': !!tailwindColor && !minimal,\n      [`text-${tailwindColor}-700`]: !!tailwindColor && !!minimal,\n      'text-gray-600': !tailwindColor,\n      '-ml-1 mr-2': !iconIsOnlyChild\n    }, iconClasses, icon?.props.className)\n  }) : null;\n  const rightIcon = iconRight ? React.cloneElement(iconRight, { ...iconRight.props,\n    height: '1em',\n    width: '1em',\n    className: cx('block ', {\n      'text-white': !!tailwindColor && !minimal,\n      [`text-${tailwindColor}-700`]: !!tailwindColor && !!minimal,\n      'text-gray-600': !tailwindColor,\n      '-mr-1 ml-2': !iconIsOnlyChild\n    }, iconClasses, iconRight?.props.className)\n  }) : null;\n  const propsToPass = { ...props,\n    className: cx('font-medium inline-flex items-center justify-center focus:outline-none transition duration-150 ease-in-out', {\n      [`shadow-xs  border border-transparent text-white bg-${tailwindColor}-600 hover:bg-${tailwindColor}-500 focus:border-${tailwindColor}-700 focus:shadow-outline-${tailwindColor} active:border-${tailwindColor}-700`]: !!tailwindColor && !minimal,\n      [`shadow-xs border border-gray-300 text-gray-700 bg-white hover:text-gray-500  focus:shadow-outline-blue focus:border-blue-300 active:text-gray-800 active:bg-gray-50`]: !tailwindColor && !minimal,\n      [`hover:bg-${tailwindColor}-100 active:bg-${tailwindColor}-200 text-${tailwindColor}-700 focus:shadow-outline-${tailwindColor} border-transparent`]: minimal && tailwindColor,\n      [`hover:bg-gray-200 active:bg-gray-300 text-gray-900 focus:shadow-outline-blue border-transparent`]: minimal && !tailwindColor\n    }, sizeClasses, className),\n    children: <>\n          {leftIcon}\n          {children}\n          {rightIcon}\n        </>\n  };\n  return React.createElement(is, { ...propsToPass,\n    ref,\n    onClick,\n    className: propsToPass.className\n  });\n});\nTWButton.displayName = 'TWButton';"]},"metadata":{},"sourceType":"module"}
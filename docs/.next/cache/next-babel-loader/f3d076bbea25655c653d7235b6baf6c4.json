{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/esm/objectWithoutProperties\";\nvar _excluded = [\"children\"],\n    _excluded2 = [\"components\"];\n\nvar _this = this,\n    _jsxFileName = \"/Users/kamell/Desktop/test-docs/src/pages/core/switch.mdx\";\n\nvar __jsx = React.createElement;\nimport React from 'react';\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\n\nimport { LayoutDocs } from 'components/LayoutDocs';\nexport var meta = {\n  \"title\": \"Switch\",\n  \"group\": \"svelteuidev-core\",\n  \"packageGroup\": \"@svelteuidev/core\",\n  \"category\": \"inputs\",\n  \"description\": \"Capture boolean input from user\",\n  \"example\": \"https://codesandbox.io/embed/switch-ndbmc9?fontsize=14&hidenavigation=1&module=%2FApp.svelte&theme=dark&view=preview\"\n};\nvar layoutProps = {\n  meta: meta\n};\n\nvar MDXLayout = function MDXLayout(_ref) {\n  var children = _ref.children,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(LayoutDocs, _extends({\n    meta: meta\n  }, props, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 22,\n      columnNumber: 3\n    }\n  }), children);\n};\n\n_c = MDXLayout;\nexport default function MDXContent(_ref2) {\n  var components = _ref2.components,\n      props = _objectWithoutProperties(_ref2, _excluded2);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 10\n    }\n  }), mdx(\"h2\", {\n    \"id\": \"usage\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 5\n    }\n  }, \"Usage\", mdx(\"a\", {\n    parentName: \"h2\",\n    \"href\": \"#usage\",\n    \"title\": \"Direct link to heading\",\n    \"className\": \"anchor\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 17\n    }\n  }, mdx(\"span\", {\n    parentName: \"a\",\n    \"className\": \"icon icon-link\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 10\n    }\n  }))), mdx(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 5\n    }\n  }, \"Switch component is used to enable/disable something, normally used for boolean values or for binary actions. The component dispatches an on change event, and supports a checked prop for programmatically setting the checked state.\"), mdx(\"pre\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 5\n    }\n  }, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-tsx\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 10\n    }\n  }, \"<Switch label=\\\"I agree to sell my privacy\\\" size=\\\"md\\\" color=\\\"teal\\\"/>\\n<Switch onLabel=\\\"ON\\\" offLabel=\\\"OFF\\\" label=\\\"Setting 1\\\" size=\\\"xl\\\" color=\\\"pink\\\"/>\\n<Switch checked size=\\\"xs\\\"/>\\n\")), mdx(\"h2\", {\n    \"id\": \"inner-labels\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 5\n    }\n  }, \"Inner Labels\", mdx(\"a\", {\n    parentName: \"h2\",\n    \"href\": \"#inner-labels\",\n    \"title\": \"Direct link to heading\",\n    \"className\": \"anchor\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 24\n    }\n  }, mdx(\"span\", {\n    parentName: \"a\",\n    \"className\": \"icon icon-link\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 10\n    }\n  }))), mdx(\"pre\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 5\n    }\n  }, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-tsx\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 10\n    }\n  }, \"<Switch size='sm' onLabel=\\\"ON\\\" offLabel=\\\"OFF\\\" />\\n<Switch size='md' onLabel=\\\"ON\\\" offLabel=\\\"OFF\\\" />\\n<Switch size='lg' onLabel=\\\"ON\\\" offLabel=\\\"OFF\\\" />\\n<Switch size='xl' onLabel=\\\"ON\\\" offLabel=\\\"OFF\\\" />\\n\")), mdx(\"h2\", {\n    \"id\": \"accessibility\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 5\n    }\n  }, \"Accessibility\", mdx(\"a\", {\n    parentName: \"h2\",\n    \"href\": \"#accessibility\",\n    \"title\": \"Direct link to heading\",\n    \"className\": \"anchor\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 25\n    }\n  }, mdx(\"span\", {\n    parentName: \"a\",\n    \"className\": \"icon icon-link\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 10\n    }\n  }))), mdx(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 5\n    }\n  }, \"Switch is a regular input with checkbox type. Provide \", mdx(\"inlineCode\", {\n    parentName: \"p\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 66\n    }\n  }, \"aria-label\"), \" if Switch is used without \", mdx(\"inlineCode\", {\n    parentName: \"p\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 151\n    }\n  }, \"label\"), \":\"), mdx(\"pre\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 5\n    }\n  }, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-tsx\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 10\n    }\n  }, \"<Switch /> // -> not ok, input is not labeled\\n<Switch label=\\\"I agree to everything\\\" /> // -> ok, input and label is connected\\n<Switch aria-label=\\\"I agree to everything\\\" /> // -> ok, label is not visible but will be announced by screen reader\\n\")));\n}\n_c2 = MDXContent;\n;\nMDXContent.isMDXComponent = true;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"MDXLayout\");\n$RefreshReg$(_c2, \"MDXContent\");","map":{"version":3,"sources":["/Users/kamell/Desktop/test-docs/src/pages/core/switch.mdx"],"names":["React","mdx","LayoutDocs","meta","layoutProps","MDXLayout","children","props","MDXContent","components","isMDXComponent"],"mappings":"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","sourcesContent":["\nimport React from 'react'\nimport { mdx } from '@mdx-js/react'\n\n/* @jsxRuntime classic */\n/* @jsx mdx */\nimport { LayoutDocs } from 'components/LayoutDocs';\n\nexport const meta = {\n  \"title\": \"Switch\",\n  \"group\": \"svelteuidev-core\",\n  \"packageGroup\": \"@svelteuidev/core\",\n  \"category\": \"inputs\",\n  \"description\": \"Capture boolean input from user\",\n  \"example\": \"https://codesandbox.io/embed/switch-ndbmc9?fontsize=14&hidenavigation=1&module=%2FApp.svelte&theme=dark&view=preview\"\n};\n\nconst layoutProps = {\n  meta\n};\nconst MDXLayout = ({ children, ...props }) => (\n  <LayoutDocs meta={meta} {...props}>{children}</LayoutDocs>\n)\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n\n    <h2 {...{\n      \"id\": \"usage\"\n    }}>{`Usage`}<a parentName=\"h2\" {...{\n        \"href\": \"#usage\",\n        \"title\": \"Direct link to heading\",\n        \"className\": \"anchor\"\n      }}><span parentName=\"a\" {...{\n          \"className\": \"icon icon-link\"\n        }}></span></a></h2>\n    <p>{`Switch component is used to enable/disable something, normally used for boolean values or for binary actions. The component dispatches an on change event, and supports a checked prop for programmatically setting the checked state.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-tsx\"\n      }}>{`<Switch label=\"I agree to sell my privacy\" size=\"md\" color=\"teal\"/>\n<Switch onLabel=\"ON\" offLabel=\"OFF\" label=\"Setting 1\" size=\"xl\" color=\"pink\"/>\n<Switch checked size=\"xs\"/>\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"inner-labels\"\n    }}>{`Inner Labels`}<a parentName=\"h2\" {...{\n        \"href\": \"#inner-labels\",\n        \"title\": \"Direct link to heading\",\n        \"className\": \"anchor\"\n      }}><span parentName=\"a\" {...{\n          \"className\": \"icon icon-link\"\n        }}></span></a></h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-tsx\"\n      }}>{`<Switch size='sm' onLabel=\"ON\" offLabel=\"OFF\" />\n<Switch size='md' onLabel=\"ON\" offLabel=\"OFF\" />\n<Switch size='lg' onLabel=\"ON\" offLabel=\"OFF\" />\n<Switch size='xl' onLabel=\"ON\" offLabel=\"OFF\" />\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"accessibility\"\n    }}>{`Accessibility`}<a parentName=\"h2\" {...{\n        \"href\": \"#accessibility\",\n        \"title\": \"Direct link to heading\",\n        \"className\": \"anchor\"\n      }}><span parentName=\"a\" {...{\n          \"className\": \"icon icon-link\"\n        }}></span></a></h2>\n    <p>{`Switch is a regular input with checkbox type. Provide `}<inlineCode parentName=\"p\">{`aria-label`}</inlineCode>{` if Switch is used without `}<inlineCode parentName=\"p\">{`label`}</inlineCode>{`:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-tsx\"\n      }}>{`<Switch /> // -> not ok, input is not labeled\n<Switch label=\"I agree to everything\" /> // -> ok, input and label is connected\n<Switch aria-label=\"I agree to everything\" /> // -> ok, label is not visible but will be announced by screen reader\n`}</code></pre>\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;"]},"metadata":{},"sourceType":"module"}